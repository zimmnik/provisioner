Vagrant.configure("2") do |config|

  config.vm.define "fedora", autostart: true, primary: true do |fedora|
    fedora.vm.box = "fedora/40-upstream"
    fedora.vm.box_url = "https://download.fedoraproject.org/pub/fedora/linux/releases/40/Cloud/x86_64/images/Fedora-Cloud-Base-Vagrant-libvirt.x86_64-40-1.14.vagrant.libvirt.box"
    fedora.vm.provider :libvirt do |lv|
      lv.title = 'fedora'
      lv.machine_virtual_size = 16
    end
  end

  config.vm.define "oracle", autostart: false do |oracle|
    oracle.vm.box = "oraclelinux/9-btrfs"
    oracle.vm.box_url = "https://oracle.github.io/vagrant-projects/boxes/oraclelinux/9-btrfs.json"
    oracle.vm.provider :libvirt do |lv|
      lv.title = 'oracle'
    end
  end
 
  config.vm.provider :libvirt do |lv|
    lv.cpus = 4
    lv.memory = 4096
    lv.video_type = 'virtio'
    lv.graphics_type = 'spice'
    lv.default_prefix = ''
    lv.qemu_use_session = false
  end

  config.vm.synced_folder "../ansible", "/vagrant", type: "rsync"

  config.vm.provision "grow up root", before: :all, type: "shell", 
    privileged: true,
    inline: <<-SHELL
      source /etc/os-release
      if [[ "${PRETTY_NAME}" = "Fedora Linux 40 (Cloud Edition)" ]]; then
        echo -e "resizepart\nFix\n4\nYes\n100%\nprint free\nquit" | parted /dev/vda ---pretend-input-tty
        btrfs fi resize 1:max /
        btrfs fi show / 
      fi
    SHELL

   config.vm.provision "update packages", type: "shell", inline: "yum --assumeyes --quiet update", reboot: false

   config.vm.provision "deploy DE", type: "shell",
     privileged: false,
     inline: <<-SHELL
       cd /vagrant
       rm -r .venv || true
       source /etc/os-release
       case "${PRETTY_NAME}" in
       "Fedora Linux 40 (Cloud Edition)")
         sudo yum --assumeyes --quiet install git python3-pip
         python -m venv --upgrade-deps .venv && source .venv/bin/activate
         ;;
       "Oracle Linux Server 9.4")
         sudo yum --assumeyes --quiet install python3.12-pip python3.12-pip-wheel git
         python3.12 -m venv --upgrade-deps .venv && source .venv/bin/activate
         ;;
       *)
         echo "Error, unsupported os"
         exit 1
         ;;
       esac
         python --version
       pip install --requirement pip_requirements.txt
         pip list --format freeze
         ansible-lint --version
       export ANSIBLE_CONFIG=ansible.cfg
       ansible-galaxy install --role-file galaxy_requirements.yml
         ansible-galaxy collection list --format yaml
         ansible-lint 
         ansible-inventory --graph --vars
       ansible-playbook deploy.yml
       #ansible-playbook deploy.yml --tags basic
     SHELL
end
